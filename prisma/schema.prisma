generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())

  attendance Attendance[]
  result     Result[]

  parentId String
  parent   Parent @relation(fields: [parentId], references: [id])
  classId  Int
  class    Class  @relation(fields: [classId], references: [id])
  gradeId  Int
  grade    Grade  @relation(fields: [gradeId], references: [id])
}

model Teacher {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())

  subjects Subject[]
  lessons  Lessons[]
  classes  Class[]
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())

  student Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes  Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  lessons      Lessons[]
  student      Student[]
  event        Events[]
  announcement Announcement[]

  supervisorId String
  supervisor   Teacher @relation(fields: [supervisorId], references: [id])
  gradeId      Int
  grade        Grade   @relation(fields: [gradeId], references: [id])
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  teachers Teacher[]
  lessons  Lessons[]
}

model Lessons {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  exams       Exam[]
  assignments Assignment[]
  attendance  Attendance[]

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  results Result[]

  lessonId Int
  lesson   Lessons @relation(fields: [lessonId], references: [id])
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  results Result[]

  lessonId Int
  lesson   Lessons @relation(fields: [lessonId], references: [id])
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  absent  Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  lessonId Int
  lesson   Lessons @relation(fields: [lessonId], references: [id])
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  Male
  Female
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
